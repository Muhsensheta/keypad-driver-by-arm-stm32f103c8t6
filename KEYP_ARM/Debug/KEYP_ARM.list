
KEYP_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000938  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a68  08000a68  00010a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a78  08000a78  00010a80  2**0
                  CONTENTS
  4 .ARM          00000000  08000a78  08000a78  00010a80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a78  08000a80  00010a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a78  08000a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000a80  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000a80  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000846  00000000  00000000  00010aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000414  00000000  00000000  000112ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00011708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f0  00000000  00000000  00011860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f74  00000000  00000000  00011950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000855  00000000  00000000  000128c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d51  00000000  00000000  00013119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00016e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000035c  00000000  00000000  00016ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a50 	.word	0x08000a50

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a50 	.word	0x08000a50

08000170 <M_GPIO_void_SetPinDir>:

#include "DIO_priv.h"
#include "DIO_int.h"

void M_GPIO_void_SetPinDir(u8 PortID , u8 PinID , u8 Dir)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	//Range Check
if(PortID < 3 && PinID < 16 && Dir < 16)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	f200 80b6 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	2b0f      	cmp	r3, #15
 800018e:	f200 80b2 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
 8000192:	797b      	ldrb	r3, [r7, #5]
 8000194:	2b0f      	cmp	r3, #15
 8000196:	f200 80ae 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
{
	if(PinID < 8) /*PIN0 : PIN7 --> CRL*/
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b07      	cmp	r3, #7
 800019e:	d852      	bhi.n	8000246 <M_GPIO_void_SetPinDir+0xd6>
	{
		switch(PortID)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2b02      	cmp	r3, #2
 80001a4:	d037      	beq.n	8000216 <M_GPIO_void_SetPinDir+0xa6>
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	f300 80a6 	bgt.w	80002f8 <M_GPIO_void_SetPinDir+0x188>
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d002      	beq.n	80001b6 <M_GPIO_void_SetPinDir+0x46>
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d018      	beq.n	80001e6 <M_GPIO_void_SetPinDir+0x76>
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
			break;
		}
	}
	}
}
 80001b4:	e0a0      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOA_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001b6:	4b53      	ldr	r3, [pc, #332]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	79ba      	ldrb	r2, [r7, #6]
 80001bc:	0092      	lsls	r2, r2, #2
 80001be:	210f      	movs	r1, #15
 80001c0:	fa01 f202 	lsl.w	r2, r1, r2
 80001c4:	43d2      	mvns	r2, r2
 80001c6:	4611      	mov	r1, r2
 80001c8:	4a4e      	ldr	r2, [pc, #312]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001ca:	400b      	ands	r3, r1
 80001cc:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001ce:	4b4d      	ldr	r3, [pc, #308]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	7979      	ldrb	r1, [r7, #5]
 80001d4:	79ba      	ldrb	r2, [r7, #6]
 80001d6:	0092      	lsls	r2, r2, #2
 80001d8:	fa01 f202 	lsl.w	r2, r1, r2
 80001dc:	4611      	mov	r1, r2
 80001de:	4a49      	ldr	r2, [pc, #292]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001e0:	430b      	orrs	r3, r1
 80001e2:	6013      	str	r3, [r2, #0]
			break;
 80001e4:	e088      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOB_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001e6:	4b48      	ldr	r3, [pc, #288]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	210f      	movs	r1, #15
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a43      	ldr	r2, [pc, #268]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 80001fa:	400b      	ands	r3, r1
 80001fc:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001fe:	4b42      	ldr	r3, [pc, #264]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	7979      	ldrb	r1, [r7, #5]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	4611      	mov	r1, r2
 800020e:	4a3e      	ldr	r2, [pc, #248]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 8000210:	430b      	orrs	r3, r1
 8000212:	6013      	str	r3, [r2, #0]
			break;
 8000214:	e070      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOC_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000216:	4b3d      	ldr	r3, [pc, #244]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	79ba      	ldrb	r2, [r7, #6]
 800021c:	0092      	lsls	r2, r2, #2
 800021e:	210f      	movs	r1, #15
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	43d2      	mvns	r2, r2
 8000226:	4611      	mov	r1, r2
 8000228:	4a38      	ldr	r2, [pc, #224]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 800022a:	400b      	ands	r3, r1
 800022c:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 800022e:	4b37      	ldr	r3, [pc, #220]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	7979      	ldrb	r1, [r7, #5]
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	4611      	mov	r1, r2
 800023e:	4a33      	ldr	r2, [pc, #204]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000240:	430b      	orrs	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
			break;
 8000244:	e058      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
	else if(PinID < 16) /*PIN0 : PIN7 --> CRL*/
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <M_GPIO_void_SetPinDir+0x186>
		PinID -=8;
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	3b08      	subs	r3, #8
 8000250:	71bb      	strb	r3, [r7, #6]
		switch(PortID)
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d036      	beq.n	80002c6 <M_GPIO_void_SetPinDir+0x156>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc4d      	bgt.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <M_GPIO_void_SetPinDir+0xf6>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d018      	beq.n	8000296 <M_GPIO_void_SetPinDir+0x126>
}
 8000264:	e048      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOA_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000266:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	79ba      	ldrb	r2, [r7, #6]
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	210f      	movs	r1, #15
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a25      	ldr	r2, [pc, #148]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 800027a:	400b      	ands	r3, r1
 800027c:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	7979      	ldrb	r1, [r7, #5]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a20      	ldr	r2, [pc, #128]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000290:	430b      	orrs	r3, r1
 8000292:	6013      	str	r3, [r2, #0]
			break;
 8000294:	e030      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOB_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	210f      	movs	r1, #15
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	7979      	ldrb	r1, [r7, #5]
 80002b4:	79ba      	ldrb	r2, [r7, #6]
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a15      	ldr	r2, [pc, #84]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
			break;
 80002c4:	e018      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOC_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002da:	400b      	ands	r3, r1
 80002dc:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	7979      	ldrb	r1, [r7, #5]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	0092      	lsls	r2, r2, #2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002f0:	430b      	orrs	r3, r1
 80002f2:	6013      	str	r3, [r2, #0]
			break;
 80002f4:	e000      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
	}
 80002f6:	bf00      	nop
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40010800 	.word	0x40010800
 8000308:	40010c00 	.word	0x40010c00
 800030c:	40011000 	.word	0x40011000
 8000310:	40010804 	.word	0x40010804
 8000314:	40010c04 	.word	0x40010c04
 8000318:	40011004 	.word	0x40011004

0800031c <M_GPIO_void_SetPinValue>:
void M_GPIO_void_SetPinValue(u8 PortID , u8 PinID , u8 Value)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
 8000326:	460b      	mov	r3, r1
 8000328:	71bb      	strb	r3, [r7, #6]
 800032a:	4613      	mov	r3, r2
 800032c:	717b      	strb	r3, [r7, #5]
	//Range Check
if(PortID < 3 && PinID < 16)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d861      	bhi.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	2b0f      	cmp	r3, #15
 8000338:	d85e      	bhi.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
{
	if(Value == LOW)
 800033a:	797b      	ldrb	r3, [r7, #5]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d12d      	bne.n	800039c <M_GPIO_void_SetPinValue+0x80>
	{
		switch(PortID)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d01e      	beq.n	8000384 <M_GPIO_void_SetPinValue+0x68>
 8000346:	2b02      	cmp	r3, #2
 8000348:	dc57      	bgt.n	80003fa <M_GPIO_void_SetPinValue+0xde>
 800034a:	2b00      	cmp	r3, #0
 800034c:	d002      	beq.n	8000354 <M_GPIO_void_SetPinValue+0x38>
 800034e:	2b01      	cmp	r3, #1
 8000350:	d00c      	beq.n	800036c <M_GPIO_void_SetPinValue+0x50>
			SET_BIT(GPIOC_ODR , PinID);
			break;
		}
	}
}
}
 8000352:	e052      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOA_ODR , PinID);
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	79ba      	ldrb	r2, [r7, #6]
 800035a:	2101      	movs	r1, #1
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	43d2      	mvns	r2, r2
 8000362:	4611      	mov	r1, r2
 8000364:	4a27      	ldr	r2, [pc, #156]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 8000366:	400b      	ands	r3, r1
 8000368:	6013      	str	r3, [r2, #0]
			break;
 800036a:	e046      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOB_ODR , PinID);
 800036c:	4b26      	ldr	r3, [pc, #152]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	79ba      	ldrb	r2, [r7, #6]
 8000372:	2101      	movs	r1, #1
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	43d2      	mvns	r2, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a22      	ldr	r2, [pc, #136]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 800037e:	400b      	ands	r3, r1
 8000380:	6013      	str	r3, [r2, #0]
			break;
 8000382:	e03a      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOC_ODR , PinID);
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	43d2      	mvns	r2, r2
 8000392:	4611      	mov	r1, r2
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 8000396:	400b      	ands	r3, r1
 8000398:	6013      	str	r3, [r2, #0]
			break;
 800039a:	e02e      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
	else if(Value == HIGH)
 800039c:	797b      	ldrb	r3, [r7, #5]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d12a      	bne.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
		switch(PortID)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d01c      	beq.n	80003e2 <M_GPIO_void_SetPinValue+0xc6>
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	dc26      	bgt.n	80003fa <M_GPIO_void_SetPinValue+0xde>
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <M_GPIO_void_SetPinValue+0x9a>
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d00b      	beq.n	80003cc <M_GPIO_void_SetPinValue+0xb0>
}
 80003b4:	e021      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOA_ODR , PinID);
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	79ba      	ldrb	r2, [r7, #6]
 80003bc:	2101      	movs	r1, #1
 80003be:	fa01 f202 	lsl.w	r2, r1, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 80003c6:	430b      	orrs	r3, r1
 80003c8:	6013      	str	r3, [r2, #0]
			break;
 80003ca:	e016      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOB_ODR , PinID);
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	79ba      	ldrb	r2, [r7, #6]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 80003dc:	430b      	orrs	r3, r1
 80003de:	6013      	str	r3, [r2, #0]
			break;
 80003e0:	e00b      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOC_ODR , PinID);
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6013      	str	r3, [r2, #0]
			break;
 80003f6:	e000      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
	}
 80003f8:	bf00      	nop
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	4001080c 	.word	0x4001080c
 8000408:	40010c0c 	.word	0x40010c0c
 800040c:	4001100c 	.word	0x4001100c

08000410 <M_GPIO_void_GetPinValue>:
void M_GPIO_void_GetPinValue(u8 PortID , u8 PinID , u8 *Value)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	603a      	str	r2, [r7, #0]
 800041a:	71fb      	strb	r3, [r7, #7]
 800041c:	460b      	mov	r3, r1
 800041e:	71bb      	strb	r3, [r7, #6]
	//Range Check
if(PortID < 3 && PinID < 16)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b02      	cmp	r3, #2
 8000424:	d830      	bhi.n	8000488 <M_GPIO_void_GetPinValue+0x78>
 8000426:	79bb      	ldrb	r3, [r7, #6]
 8000428:	2b0f      	cmp	r3, #15
 800042a:	d82d      	bhi.n	8000488 <M_GPIO_void_GetPinValue+0x78>
{
		switch(PortID)
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	2b02      	cmp	r3, #2
 8000430:	d01e      	beq.n	8000470 <M_GPIO_void_GetPinValue+0x60>
 8000432:	2b02      	cmp	r3, #2
 8000434:	dc29      	bgt.n	800048a <M_GPIO_void_GetPinValue+0x7a>
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <M_GPIO_void_GetPinValue+0x30>
 800043a:	2b01      	cmp	r3, #1
 800043c:	d00c      	beq.n	8000458 <M_GPIO_void_GetPinValue+0x48>
		case PORTC_ID:
			*Value = GET_BIT(GPIOC_IDR , PinID);
			break;
		}
	}
}
 800043e:	e024      	b.n	800048a <M_GPIO_void_GetPinValue+0x7a>
			*Value = GET_BIT(GPIOA_IDR , PinID);
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <M_GPIO_void_GetPinValue+0x84>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	fa22 f303 	lsr.w	r3, r2, r3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	f003 0301 	and.w	r3, r3, #1
 8000450:	b2da      	uxtb	r2, r3
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	701a      	strb	r2, [r3, #0]
			break;
 8000456:	e018      	b.n	800048a <M_GPIO_void_GetPinValue+0x7a>
			*Value = GET_BIT(GPIOB_IDR , PinID);
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <M_GPIO_void_GetPinValue+0x88>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	fa22 f303 	lsr.w	r3, r2, r3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	b2da      	uxtb	r2, r3
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	701a      	strb	r2, [r3, #0]
			break;
 800046e:	e00c      	b.n	800048a <M_GPIO_void_GetPinValue+0x7a>
			*Value = GET_BIT(GPIOC_IDR , PinID);
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <M_GPIO_void_GetPinValue+0x8c>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	fa22 f303 	lsr.w	r3, r2, r3
 800047a:	b2db      	uxtb	r3, r3
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	b2da      	uxtb	r2, r3
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	701a      	strb	r2, [r3, #0]
			break;
 8000486:	e000      	b.n	800048a <M_GPIO_void_GetPinValue+0x7a>
	}
 8000488:	bf00      	nop
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40010808 	.word	0x40010808
 8000498:	40010c08 	.word	0x40010c08
 800049c:	40011008 	.word	0x40011008

080004a0 <_delay_ms>:
 */
#include "STD_TYPES.h"
#include "Delay.h"

void	_delay_ms(u32 _ms)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < (_ms * 500) ; i++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	e003      	b.n	80004b6 <_delay_ms+0x16>
	{
		asm("NOP");
 80004ae:	bf00      	nop
	for(u32 i = 0; i < (_ms * 500) ; i++)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3301      	adds	r3, #1
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004bc:	fb02 f303 	mul.w	r3, r2, r3
 80004c0:	68fa      	ldr	r2, [r7, #12]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d3f3      	bcc.n	80004ae <_delay_ms+0xe>
	}
}
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <H_KEYPAD_void_init>:
#include"KEYPAD_priv.h"
#include"KEYPAD_config.h"
#include"KEYPAD_int.h"

void H_KEYPAD_void_init()
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  //set all rows  direction as output
	M_GPIO_void_SetPinDir(KEYPAD_R0_PORT, KEYPAD_R0_PIN, OUT_2MHZ_PP);
 80004d6:	2202      	movs	r2, #2
 80004d8:	2104      	movs	r1, #4
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff fe48 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(KEYPAD_R1_PORT, KEYPAD_R1_PIN, OUT_2MHZ_PP);
 80004e0:	2202      	movs	r2, #2
 80004e2:	2105      	movs	r1, #5
 80004e4:	2001      	movs	r0, #1
 80004e6:	f7ff fe43 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(KEYPAD_R2_PORT, KEYPAD_R2_PIN, OUT_2MHZ_PP);
 80004ea:	2202      	movs	r2, #2
 80004ec:	2106      	movs	r1, #6
 80004ee:	2001      	movs	r0, #1
 80004f0:	f7ff fe3e 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(KEYPAD_R3_PORT, KEYPAD_R3_PIN, OUT_2MHZ_PP);
 80004f4:	2202      	movs	r2, #2
 80004f6:	2107      	movs	r1, #7
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff fe39 	bl	8000170 <M_GPIO_void_SetPinDir>

	//set all collums direction as input
	M_GPIO_void_SetPinDir(KEYPAD_C0_PORT,KEYPAD_C0_PIN, IN_PULL_UP_DOWN);
 80004fe:	2208      	movs	r2, #8
 8000500:	2109      	movs	r1, #9
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff fe34 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(KEYPAD_C1_PORT, KEYPAD_C1_PIN, IN_PULL_UP_DOWN);
 8000508:	2208      	movs	r2, #8
 800050a:	210a      	movs	r1, #10
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff fe2f 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(KEYPAD_C2_PORT, KEYPAD_C2_PIN, IN_PULL_UP_DOWN);
 8000512:	2208      	movs	r2, #8
 8000514:	210b      	movs	r1, #11
 8000516:	2000      	movs	r0, #0
 8000518:	f7ff fe2a 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(KEYPAD_C3_PORT, KEYPAD_C3_PIN, IN_PULL_UP_DOWN);
 800051c:	2208      	movs	r2, #8
 800051e:	210c      	movs	r1, #12
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff fe25 	bl	8000170 <M_GPIO_void_SetPinDir>

	M_GPIO_void_SetPinValue(KEYPAD_C0_PORT,KEYPAD_C0_PIN,HIGH);
 8000526:	2201      	movs	r2, #1
 8000528:	2109      	movs	r1, #9
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff fef6 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(KEYPAD_C1_PORT,KEYPAD_C1_PIN,HIGH);
 8000530:	2201      	movs	r2, #1
 8000532:	210a      	movs	r1, #10
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fef1 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(KEYPAD_C2_PORT,KEYPAD_C2_PIN,HIGH);
 800053a:	2201      	movs	r2, #1
 800053c:	210b      	movs	r1, #11
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff feec 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(KEYPAD_C3_PORT,KEYPAD_C3_PIN,HIGH);
 8000544:	2201      	movs	r2, #1
 8000546:	210c      	movs	r1, #12
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff fee7 	bl	800031c <M_GPIO_void_SetPinValue>

	//deactivate rows (high)
	M_GPIO_void_SetPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
 800054e:	2201      	movs	r2, #1
 8000550:	2104      	movs	r1, #4
 8000552:	2001      	movs	r0, #1
 8000554:	f7ff fee2 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
 8000558:	2201      	movs	r2, #1
 800055a:	2105      	movs	r1, #5
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff fedd 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
 8000562:	2201      	movs	r2, #1
 8000564:	2106      	movs	r1, #6
 8000566:	2001      	movs	r0, #1
 8000568:	f7ff fed8 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
 800056c:	2201      	movs	r2, #1
 800056e:	2107      	movs	r1, #7
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff fed3 	bl	800031c <M_GPIO_void_SetPinValue>

  }
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <H_KEYPAD_void_getPressedKey>:
u8 H_KEYPAD_void_getPressedKey()
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
	u8 loc_state= NO_PRESSED_KEY ;
 8000582:	23ff      	movs	r3, #255	; 0xff
 8000584:	757b      	strb	r3, [r7, #21]
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <H_KEYPAD_void_getPressedKey+0xb4>)
 8000588:	1d3c      	adds	r4, r7, #4
 800058a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	u8 read;
	 for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
 8000590:	2304      	movs	r3, #4
 8000592:	75fb      	strb	r3, [r7, #23]
 8000594:	e043      	b.n	800061e <H_KEYPAD_void_getPressedKey+0xa2>
	{
		 M_GPIO_void_SetPinValue(KEYPAD_ROW_PORTS,loc_row_indx,LOW);
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff febd 	bl	800031c <M_GPIO_void_SetPinValue>
		   for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
 80005a2:	2309      	movs	r3, #9
 80005a4:	75bb      	strb	r3, [r7, #22]
 80005a6:	e02e      	b.n	8000606 <H_KEYPAD_void_getPressedKey+0x8a>
		   {
			   M_GPIO_void_GetPinValue(KEYPAD_COLS_PORTS, loc_col_indx, &read);
 80005a8:	1cfa      	adds	r2, r7, #3
 80005aa:	7dbb      	ldrb	r3, [r7, #22]
 80005ac:	4619      	mov	r1, r3
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff ff2e 	bl	8000410 <M_GPIO_void_GetPinValue>
			   if(read==ACTIVE_LOW_PRESSED)
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d122      	bne.n	8000600 <H_KEYPAD_void_getPressedKey+0x84>
			   {
				   //debouncing delay
				   _delay_ms(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f7ff ff70 	bl	80004a0 <_delay_ms>
				  M_GPIO_void_GetPinValue(KEYPAD_COLS_PORTS, loc_col_indx, &read);
 80005c0:	1cfa      	adds	r2, r7, #3
 80005c2:	7dbb      	ldrb	r3, [r7, #22]
 80005c4:	4619      	mov	r1, r3
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff ff22 	bl	8000410 <M_GPIO_void_GetPinValue>
			 if(read==ACTIVE_LOW_PRESSED)
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d116      	bne.n	8000600 <H_KEYPAD_void_getPressedKey+0x84>
			 {


				 while(read==ACTIVE_LOW_PRESSED)
 80005d2:	e005      	b.n	80005e0 <H_KEYPAD_void_getPressedKey+0x64>
					 {
					 M_GPIO_void_GetPinValue(KEYPAD_COLS_PORTS, loc_col_indx, &read);
 80005d4:	1cfa      	adds	r2, r7, #3
 80005d6:	7dbb      	ldrb	r3, [r7, #22]
 80005d8:	4619      	mov	r1, r3
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ff18 	bl	8000410 <M_GPIO_void_GetPinValue>
				 while(read==ACTIVE_LOW_PRESSED)
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f6      	beq.n	80005d4 <H_KEYPAD_void_getPressedKey+0x58>
					 }
					 read= loc_keypad_arr[loc_row_indx - KEYPAD_R0_PIN ][ loc_col_indx -  KEYPAD_C0_PIN ];
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
 80005e8:	1f1a      	subs	r2, r3, #4
 80005ea:	7dbb      	ldrb	r3, [r7, #22]
 80005ec:	3b09      	subs	r3, #9
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	3218      	adds	r2, #24
 80005f2:	443a      	add	r2, r7
 80005f4:	4413      	add	r3, r2
 80005f6:	3b14      	subs	r3, #20
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	70fb      	strb	r3, [r7, #3]
					 	return read;
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	e012      	b.n	8000626 <H_KEYPAD_void_getPressedKey+0xaa>
		   for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
 8000600:	7dbb      	ldrb	r3, [r7, #22]
 8000602:	3301      	adds	r3, #1
 8000604:	75bb      	strb	r3, [r7, #22]
 8000606:	7dbb      	ldrb	r3, [r7, #22]
 8000608:	2b0c      	cmp	r3, #12
 800060a:	d9cd      	bls.n	80005a8 <H_KEYPAD_void_getPressedKey+0x2c>

			 }

		 }
	  }//deactivate rows
		   M_GPIO_void_SetPinValue(KEYPAD_ROW_PORTS,loc_row_indx,HIGH);
 800060c:	7dfb      	ldrb	r3, [r7, #23]
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff fe82 	bl	800031c <M_GPIO_void_SetPinValue>
	 for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	3301      	adds	r3, #1
 800061c:	75fb      	strb	r3, [r7, #23]
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	2b07      	cmp	r3, #7
 8000622:	d9b8      	bls.n	8000596 <H_KEYPAD_void_getPressedKey+0x1a>


	}
	 return  loc_state;
 8000624:	7d7b      	ldrb	r3, [r7, #21]
}
 8000626:	4618      	mov	r0, r3
 8000628:	371c      	adds	r7, #28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	bf00      	nop
 8000630:	08000a68 	.word	0x08000a68

08000634 <H_LCD_void_Init>:

#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
void H_LCD_void_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

	// set direction Rs, EN
	M_GPIO_void_SetPinDir(LCD_RS_PORT, LCD_RS_PIN,OUT_2MHZ_PP);
 8000638:	2202      	movs	r2, #2
 800063a:	2101      	movs	r1, #1
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff fd97 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(LCD_EN_PORT,LCD_EN_PIN,OUT_2MHZ_PP);
 8000642:	2202      	movs	r2, #2
 8000644:	2102      	movs	r1, #2
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fd92 	bl	8000170 <M_GPIO_void_SetPinDir>
	//set direction D4 .. D7
	M_GPIO_void_SetPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT_2MHZ_PP);
 800064c:	2202      	movs	r2, #2
 800064e:	2106      	movs	r1, #6
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff fd8d 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT_2MHZ_PP);
 8000656:	2202      	movs	r2, #2
 8000658:	2105      	movs	r1, #5
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff fd88 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT_2MHZ_PP);
 8000660:	2202      	movs	r2, #2
 8000662:	2104      	movs	r1, #4
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff fd83 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT_2MHZ_PP);
 800066a:	2202      	movs	r2, #2
 800066c:	2103      	movs	r1, #3
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff fd7e 	bl	8000170 <M_GPIO_void_SetPinDir>
	// send Init Sequence
#if(LCD_MODE  == LCD_8BIT_MODE_)
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
 8000674:	2023      	movs	r0, #35	; 0x23
 8000676:	f7ff ff13 	bl	80004a0 <_delay_ms>
	// Rs = command = 0
	M_GPIO_void_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
 800067a:	2200      	movs	r2, #0
 800067c:	2101      	movs	r1, #1
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fe4c 	bl	800031c <M_GPIO_void_SetPinValue>
	// EN = 0 disabled
	M_GPIO_void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
 8000684:	2200      	movs	r2, #0
 8000686:	2102      	movs	r1, #2
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff fe47 	bl	800031c <M_GPIO_void_SetPinValue>
	// prepare data
	M_GPIO_void_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
 800068e:	2200      	movs	r2, #0
 8000690:	2106      	movs	r1, #6
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fe42 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
 8000698:	2200      	movs	r2, #0
 800069a:	2105      	movs	r1, #5
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fe3d 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2104      	movs	r1, #4
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff fe38 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2103      	movs	r1, #3
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff fe33 	bl	800031c <M_GPIO_void_SetPinValue>
	//EN = 1
	M_GPIO_void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2102      	movs	r1, #2
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff fe2e 	bl	800031c <M_GPIO_void_SetPinValue>
	// delay 1 msec (to allow latching)
	_delay_ms(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff feed 	bl	80004a0 <_delay_ms>
	// EN = 0
	M_GPIO_void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2102      	movs	r1, #2
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fe26 	bl	800031c <M_GPIO_void_SetPinValue>
	// delay to allow processing
	_delay_ms(5);
 80006d0:	2005      	movs	r0, #5
 80006d2:	f7ff fee5 	bl	80004a0 <_delay_ms>
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
 80006d6:	2028      	movs	r0, #40	; 0x28
 80006d8:	f000 f81d 	bl	8000716 <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
 80006dc:	200e      	movs	r0, #14
 80006de:	f000 f81a 	bl	8000716 <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 f817 	bl	8000716 <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
 80006e8:	2006      	movs	r0, #6
 80006ea:	f000 f814 	bl	8000716 <H_LCD_void_sendCommand>

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	4603      	mov	r3, r0
 80006fa:	71fb      	strb	r3, [r7, #7]
  // step 1 : select RS to be in data mode (RS = 1)
	M_GPIO_void_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fe0b 	bl	800031c <M_GPIO_void_SetPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f847 	bl	800079c <H_LCD_void_writeNlatch>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	71fb      	strb	r3, [r7, #7]
	// step 1 : select RS to be in command mode (RS = 0)
	M_GPIO_void_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff fdf9 	bl	800031c <M_GPIO_void_SetPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f835 	bl	800079c <H_LCD_void_writeNlatch>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <H_LCD_void_clear>:
	   H_LCD_void_sendData(*pstr);
	   pstr++;
   }
}
void H_LCD_void_clear(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ffe9 	bl	8000716 <H_LCD_void_sendCommand>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <H_LCD_void_gotXY>:
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
	   i--;
   }
}
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	71bb      	strb	r3, [r7, #6]
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <H_LCD_void_gotXY+0x1c>
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d116      	bne.n	8000792 <H_LCD_void_gotXY+0x4a>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	2b0f      	cmp	r3, #15
 8000768:	d813      	bhi.n	8000792 <H_LCD_void_gotXY+0x4a>
	  {
          switch(copy_u8Row)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <H_LCD_void_gotXY+0x2e>
 8000770:	2b01      	cmp	r3, #1
 8000772:	d007      	beq.n	8000784 <H_LCD_void_gotXY+0x3c>
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
        	  break;
          }
	  }
  }
}
 8000774:	e00e      	b.n	8000794 <H_LCD_void_gotXY+0x4c>
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	3b80      	subs	r3, #128	; 0x80
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ffca 	bl	8000716 <H_LCD_void_sendCommand>
        	  break;
 8000782:	e007      	b.n	8000794 <H_LCD_void_gotXY+0x4c>
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	3b40      	subs	r3, #64	; 0x40
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc3 	bl	8000716 <H_LCD_void_sendCommand>
        	  break;
 8000790:	e000      	b.n	8000794 <H_LCD_void_gotXY+0x4c>
	  }
 8000792:	bf00      	nop
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <H_LCD_void_writeNlatch>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{

}
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_GPIO_void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2102      	movs	r1, #2
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff fdb6 	bl	800031c <M_GPIO_void_SetPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_GPIO_void_SetPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	091b      	lsrs	r3, r3, #4
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	2103      	movs	r1, #3
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff fdab 	bl	800031c <M_GPIO_void_SetPinValue>
 	M_GPIO_void_SetPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	095b      	lsrs	r3, r3, #5
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	2104      	movs	r1, #4
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff fda0 	bl	800031c <M_GPIO_void_SetPinValue>
 	M_GPIO_void_SetPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	099b      	lsrs	r3, r3, #6
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	2105      	movs	r1, #5
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fd95 	bl	800031c <M_GPIO_void_SetPinValue>
 	M_GPIO_void_SetPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	09db      	lsrs	r3, r3, #7
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	2106      	movs	r1, #6
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fd8d 	bl	800031c <M_GPIO_void_SetPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
 8000802:	2201      	movs	r2, #1
 8000804:	2102      	movs	r1, #2
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff fd88 	bl	800031c <M_GPIO_void_SetPinValue>
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fe47 	bl	80004a0 <_delay_ms>
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
 8000812:	2200      	movs	r2, #0
 8000814:	2102      	movs	r1, #2
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff fd80 	bl	800031c <M_GPIO_void_SetPinValue>
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 800081c:	2005      	movs	r0, #5
 800081e:	f7ff fe3f 	bl	80004a0 <_delay_ms>
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_GPIO_void_SetPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	2103      	movs	r1, #3
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fd74 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	M_GPIO_void_SetPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	085b      	lsrs	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	2104      	movs	r1, #4
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff fd69 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	M_GPIO_void_SetPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	089b      	lsrs	r3, r3, #2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	2105      	movs	r1, #5
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fd5e 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	M_GPIO_void_SetPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	2106      	movs	r1, #6
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fd53 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
 8000876:	2201      	movs	r2, #1
 8000878:	2102      	movs	r1, #2
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fd4e 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff fe0d 	bl	80004a0 <_delay_ms>
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
 8000886:	2200      	movs	r2, #0
 8000888:	2102      	movs	r1, #2
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff fd46 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	 // step 10 : delay to allow LCD to process
 	 	_delay_ms(5);
 8000890:	2005      	movs	r0, #5
 8000892:	f7ff fe05 	bl	80004a0 <_delay_ms>
#else
  #error("Wrong LCD mode")
#endif

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MRCC_voidSysClkInit>:




void	MRCC_voidSysClkInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MRCC_voidSysClkInit+0x30>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <MRCC_voidSysClkInit+0x30>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MRCC_voidSysClkInit+0x34>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <MRCC_voidSysClkInit+0x34>)
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,1);
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MRCC_voidSysClkInit+0x34>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <MRCC_voidSysClkInit+0x34>)
 80008c2:	f023 0302 	bic.w	r3, r3, #2
 80008c6:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40021004 	.word	0x40021004

080008d8 <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	4613      	mov	r3, r2
 80008e6:	71bb      	strb	r3, [r7, #6]
	/*	Range Check						*/
	if(PerNum<32)
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	2b1f      	cmp	r3, #31
 80008ec:	d82a      	bhi.n	8000944 <MRCC_voidEnablePerClk+0x6c>
	{
		switch(PerBus)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d01c      	beq.n	800092e <MRCC_voidEnablePerClk+0x56>
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	dc25      	bgt.n	8000944 <MRCC_voidEnablePerClk+0x6c>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <MRCC_voidEnablePerClk+0x2a>
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d00b      	beq.n	8000918 <MRCC_voidEnablePerClk+0x40>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 8000900:	e020      	b.n	8000944 <MRCC_voidEnablePerClk+0x6c>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MRCC_voidEnablePerClk+0x78>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	79ba      	ldrb	r2, [r7, #6]
 8000908:	2101      	movs	r1, #1
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	4611      	mov	r1, r2
 8000910:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <MRCC_voidEnablePerClk+0x78>)
 8000912:	430b      	orrs	r3, r1
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e015      	b.n	8000944 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MRCC_voidEnablePerClk+0x7c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	79ba      	ldrb	r2, [r7, #6]
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MRCC_voidEnablePerClk+0x7c>)
 8000928:	430b      	orrs	r3, r1
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e00a      	b.n	8000944 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MRCC_voidEnablePerClk+0x80>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	79ba      	ldrb	r2, [r7, #6]
 8000934:	2101      	movs	r1, #1
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	4611      	mov	r1, r2
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <MRCC_voidEnablePerClk+0x80>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	bf00      	nop
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021014 	.word	0x40021014
 8000954:	4002101c 	.word	0x4002101c
 8000958:	40021018 	.word	0x40021018

0800095c <main>:
#include    "KEYPAD_int.h"


u8 Key;
int	main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	/*	Initialization Part		*/

	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 8000960:	f7ff ff9e 	bl	80008a0 <MRCC_voidSysClkInit>


	/*	Toggle Led C13	GPIOC	*/
	/*	1- Enable Per Clk "RCC" Port A		*/
	MRCC_voidEnablePerClk(RCC_APB2,2);
 8000964:	2102      	movs	r1, #2
 8000966:	2002      	movs	r0, #2
 8000968:	f7ff ffb6 	bl	80008d8 <MRCC_voidEnablePerClk>
	/*	1- Enable Per Clk "RCC" Port B		*/
	MRCC_voidEnablePerClk(RCC_APB2,3);
 800096c:	2103      	movs	r1, #3
 800096e:	2002      	movs	r0, #2
 8000970:	f7ff ffb2 	bl	80008d8 <MRCC_voidEnablePerClk>

	//LCD INITIALIZE
	H_LCD_void_Init();
 8000974:	f7ff fe5e 	bl	8000634 <H_LCD_void_Init>
	H_KEYPAD_void_init();
 8000978:	f7ff fdab 	bl	80004d2 <H_KEYPAD_void_init>
   }
*/

	while(1)
	{
		Key=H_KEYPAD_void_getPressedKey();
 800097c:	f7ff fdfe 	bl	800057c <H_KEYPAD_void_getPressedKey>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <main+0x54>)
 8000986:	701a      	strb	r2, [r3, #0]
		H_LCD_void_gotXY(0,1);
 8000988:	2101      	movs	r1, #1
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fedc 	bl	8000748 <H_LCD_void_gotXY>
		   if (Key!=NO_PRESSED_KEY)
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <main+0x54>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2bff      	cmp	r3, #255	; 0xff
 8000996:	d004      	beq.n	80009a2 <main+0x46>
		   {
			   H_LCD_void_sendData(Key);
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <main+0x54>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fea8 	bl	80006f2 <H_LCD_void_sendData>
		   }
		   _delay_ms(500);
 80009a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a6:	f7ff fd7b 	bl	80004a0 <_delay_ms>
		   H_LCD_void_clear();
 80009aa:	f7ff fec6 	bl	800073a <H_LCD_void_clear>
		Key=H_KEYPAD_void_getPressedKey();
 80009ae:	e7e5      	b.n	800097c <main+0x20>
 80009b0:	2000001c 	.word	0x2000001c

080009b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	; (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	; (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009e2:	f000 f811 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e6:	f7ff ffb9 	bl	800095c <main>

080009ea <LoopForever>:

LoopForever:
  b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   r0, =_estack
 80009ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009f8:	08000a80 	.word	0x08000a80
  ldr r2, =_sbss
 80009fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a00:	20000020 	.word	0x20000020

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>
	...

08000a08 <__libc_init_array>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	4d0c      	ldr	r5, [pc, #48]	; (8000a40 <__libc_init_array+0x38>)
 8000a0e:	4c0d      	ldr	r4, [pc, #52]	; (8000a44 <__libc_init_array+0x3c>)
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	42a6      	cmp	r6, r4
 8000a16:	d109      	bne.n	8000a2c <__libc_init_array+0x24>
 8000a18:	f000 f81a 	bl	8000a50 <_init>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	4d0a      	ldr	r5, [pc, #40]	; (8000a48 <__libc_init_array+0x40>)
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <__libc_init_array+0x44>)
 8000a22:	1b64      	subs	r4, r4, r5
 8000a24:	10a4      	asrs	r4, r4, #2
 8000a26:	42a6      	cmp	r6, r4
 8000a28:	d105      	bne.n	8000a36 <__libc_init_array+0x2e>
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a30:	4798      	blx	r3
 8000a32:	3601      	adds	r6, #1
 8000a34:	e7ee      	b.n	8000a14 <__libc_init_array+0xc>
 8000a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3a:	4798      	blx	r3
 8000a3c:	3601      	adds	r6, #1
 8000a3e:	e7f2      	b.n	8000a26 <__libc_init_array+0x1e>
 8000a40:	08000a78 	.word	0x08000a78
 8000a44:	08000a78 	.word	0x08000a78
 8000a48:	08000a78 	.word	0x08000a78
 8000a4c:	08000a7c 	.word	0x08000a7c

08000a50 <_init>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr

08000a5c <_fini>:
 8000a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5e:	bf00      	nop
 8000a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a62:	bc08      	pop	{r3}
 8000a64:	469e      	mov	lr, r3
 8000a66:	4770      	bx	lr
